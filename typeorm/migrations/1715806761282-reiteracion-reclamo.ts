import { MigrationInterface, QueryRunner } from "typeorm";

export class ReiteracionReclamo1715806761282 implements MigrationInterface {

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(
            `CREATE TABLE reclamos.reiteracion
            (
                id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 100 ),
                idreclamo integer NOT NULL,
                fecha_hora timestamp with time zone NOT NULL,
                observacion character varying(60),
                eliminado boolean NOT NULL DEFAULT false,
                PRIMARY KEY (id),
                CONSTRAINT fk_reiteracion_reclamo FOREIGN KEY (idreclamo)
                    REFERENCES reclamos.reclamo (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
                    NOT VALID
            )`
        );
        await queryRunner.query(
            `CREATE VIEW reclamos.vw_reiteraciones
            AS
            SELECT
               reiteracion.id,
               reiteracion.idreclamo,
               reiteracion.fecha_hora AS fechahora,
               reiteracion.observacion,
               reiteracion.eliminado
            FROM reclamos.reiteracion`
        );
        await queryRunner.query(`INSERT INTO public.modulo(id, descripcion, eliminado) VALUES(34, 'Reiteraci√≥n de Reclamos', false)`);
        await queryRunner.query(`INSERT INTO public.funcionalidad(id, idmodulo, nombre, eliminado) VALUES(920, 34, 'Consultar', false)`);
        await queryRunner.query(`INSERT INTO public.funcionalidad(id, idmodulo, nombre, eliminado) VALUES(921, 34, 'Registrar', false)`);
        await queryRunner.query(`INSERT INTO public.funcionalidad(id, idmodulo, nombre, eliminado) VALUES(922, 34, 'Editar', false)`);
        await queryRunner.query(`INSERT INTO public.funcionalidad(id, idmodulo, nombre, eliminado) VALUES(923, 34, 'Eliminar', false)`);
        await queryRunner.query(`INSERT INTO public.tabla_auditoria(id, descripcion) VALUES(32, 'Reiteracion de Reclamos')`);
        await queryRunner.query(`DROP VIEW IF EXISTS reclamos.vw_reclamos`);
        await queryRunner.query(
            `CREATE OR REPLACE VIEW reclamos.vw_reclamos AS
            SELECT reclamo.id,
            reclamo.fecha,
            reclamo.fecha_hora_cambio_estado AS fechahoracambioestado,
            reclamo.observacion_estado AS observacionestado,
            reclamo.idusuario_registro AS idusuarioregistro,
            TRIM(BOTH FROM concat(uregistro.nombres, ' ', uregistro.apellidos)) AS usuarioregistro,
            reclamo.idusuario_responsable AS idusuarioresponsable,
            TRIM(BOTH FROM concat(uresponsable.nombres, ' ', uresponsable.apellidos)) AS usuarioresponsable,
            reclamo.idsuscripcion,
            suscripcion.iddomicilio,
            domicilio.direccion,
            domicilio.ubicacion[0] AS latitud,
            domicilio.ubicacion[1] AS longitud,
            domicilio.idbarrio,
            barrio.descripcion AS barrio,
            domicilio.observacion AS obsdomicilio,
            servicio.id AS idservicio,
            servicio.descripcion AS servicio,
            suscripcion.monto,
            suscripcion.observacion AS obssuscripcion,
            cliente.id AS idcliente,
            cliente.razon_social AS cliente,
            reclamo.estado,
            reclamo.eliminado,
            reclamo.observacion,
            reclamo.telefono,
            reclamo.motivo_postergacion AS motivopostergacion,
            (SELECT COUNT(*)
            FROM reclamos.reiteracion
            WHERE reiteracion.idreclamo = reclamo.id AND reiteracion.eliminado = false) AS nroreiteraciones
        FROM reclamos.reclamo
            JOIN suscripcion ON reclamo.idsuscripcion = suscripcion.id
            JOIN domicilio ON suscripcion.iddomicilio = domicilio.id
            JOIN barrio ON domicilio.idbarrio = barrio.id
            JOIN cliente ON suscripcion.idcliente = cliente.id
            JOIN servicio ON suscripcion.idservicio = servicio.id
            JOIN usuario uregistro ON uregistro.id = reclamo.idusuario_registro
            LEFT JOIN usuario uresponsable ON uresponsable.id = reclamo.idusuario_responsable`
        );
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`DROP VIEW IF EXISTS reclamos.vw_reiteraciones`)
        await queryRunner.query(`DROP TABLE IF EXISTS reclamos.reiteracion`);
        await queryRunner.query(`DELETE FROM public.permiso WHERE idfuncionalidad >= 920 AND idfuncionalidad <= 923`);
        await queryRunner.query(`DELETE FROM public.funcionalidad WHERE id >= 920 AND id <= 923`);
        await queryRunner.query(`DELETE FROM public.modulo WHERE id = 34`);
        await queryRunner.query(`DELETE FROM public.evento_auditoria WHERE idtabla = 32`);
        await queryRunner.query(`DELETE FROM public.tabla_auditoria WHERE id = 32`);
        await queryRunner.query(`DROP VIEW IF EXISTS reclamos.vw_reclamos`);
        await queryRunner.query(
            `CREATE OR REPLACE VIEW reclamos.vw_reclamos AS
            SELECT reclamo.id,
            reclamo.fecha,
            reclamo.fecha_hora_cambio_estado AS fechahoracambioestado,
            reclamo.observacion_estado AS observacionestado,
            reclamo.idusuario_registro AS idusuarioregistro,
            TRIM(BOTH FROM concat(uregistro.nombres, ' ', uregistro.apellidos)) AS usuarioregistro,
            reclamo.idusuario_responsable AS idusuarioresponsable,
            TRIM(BOTH FROM concat(uresponsable.nombres, ' ', uresponsable.apellidos)) AS usuarioresponsable,
            reclamo.idsuscripcion,
            suscripcion.iddomicilio,
            domicilio.direccion,
            domicilio.ubicacion[0] AS latitud,
            domicilio.ubicacion[1] AS longitud,
            domicilio.idbarrio,
            barrio.descripcion AS barrio,
            domicilio.observacion AS obsdomicilio,
            servicio.id AS idservicio,
            servicio.descripcion AS servicio,
            suscripcion.monto,
            suscripcion.observacion AS obssuscripcion,
            cliente.id AS idcliente,
            cliente.razon_social AS cliente,
            reclamo.estado,
            reclamo.eliminado,
            reclamo.observacion,
            reclamo.telefono,
            reclamo.motivo_postergacion AS motivopostergacion
        FROM reclamos.reclamo
            JOIN suscripcion ON reclamo.idsuscripcion = suscripcion.id
            JOIN domicilio ON suscripcion.iddomicilio = domicilio.id
            JOIN barrio ON domicilio.idbarrio = barrio.id
            JOIN cliente ON suscripcion.idcliente = cliente.id
            JOIN servicio ON suscripcion.idservicio = servicio.id
            JOIN usuario uregistro ON uregistro.id = reclamo.idusuario_registro
            LEFT JOIN usuario uresponsable ON uresponsable.id = reclamo.idusuario_responsable`
        );
    }

}
