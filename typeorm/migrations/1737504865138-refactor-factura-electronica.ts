import { MigrationInterface, QueryRunner } from "typeorm";

export class RefactorFacturaElectronica1737504865138 implements MigrationInterface {

    public async up(queryRunner: QueryRunner): Promise<void> {
        await this.dropViews(queryRunner);

        await queryRunner.query(`UPDATE public.tabla_auditoria SET descripcion = 'Documento Tributario Electrónico (DTE)' WHERE id = 38`);

        await this.dropForeignKeysUp(queryRunner);
        
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.factura_electronica RENAME documento_electronico TO xml;`)
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.cancelacion_factura RENAME documento TO xml;`);

        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.factura_electronica RENAME TO dte;`);
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.dte ADD COLUMN id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY;`);
        
        await queryRunner.query(
            `ALTER TABLE IF EXISTS facturacion.dte DROP CONSTRAINT IF EXISTS factura_electronica_pkey;
            ALTER TABLE IF EXISTS facturacion.dte ADD CONSTRAINT dte_pkey PRIMARY KEY (id);`
        );

        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.cancelacion_factura RENAME idventa TO iddte;`);
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.cancelacion_factura RENAME TO dte_cancelacion;`);

        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.detalle_lote RENAME idventa TO iddte;`);
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.detalle_lote RENAME TO lote_detalle;`);
        
        await queryRunner.query(`ALTER TABLE IF EXISTS public.venta ADD COLUMN iddte integer;`);
        await queryRunner.query(
            `ALTER TABLE IF EXISTS public.venta
                ADD CONSTRAINT fk_venta_dte FOREIGN KEY (iddte)
                REFERENCES facturacion.dte (id) MATCH SIMPLE
                ON UPDATE NO ACTION
                ON DELETE NO ACTION
                NOT VALID;`
        );
        await queryRunner.query(
            `UPDATE public.venta
            SET iddte = dte.id
            FROM facturacion.dte
            WHERE dte.idventa = venta.id`
        );
        await queryRunner.query(
            `UPDATE facturacion.lote_detalle
            SET iddte = dte.id
            FROM facturacion.dte
            WHERE dte.idventa = lote_detalle.iddte`
        );
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.dte DROP CONSTRAINT IF EXISTS fk_factura_electronica_venta;`);
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.dte DROP COLUMN IF EXISTS idventa;`);
        
        await this.createForeignKeysUp(queryRunner);
        await this.createViewsUp(queryRunner);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await this.dropViews(queryRunner);

        await queryRunner.query(`UPDATE public.tabla_auditoria SET descripcion = 'Factura Electrónica' WHERE id = 38`);
        
        await this.dropForeignKeysDown(queryRunner);

        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.dte ADD COLUMN idventa integer;`);
        await queryRunner.query(
            `UPDATE facturacion.dte
            SET idventa = venta.id
            FROM public.venta
            WHERE venta.iddte = dte.id`
        );
        await queryRunner.query(
            `UPDATE facturacion.lote_detalle
            SET iddte = dte.idventa
            FROM facturacion.dte
            WHERE iddte = dte.id`
        );
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.dte ALTER COLUMN idventa SET NOT NULL;`);
        await queryRunner.query(`ALTER TABLE IF EXISTS public.venta DROP COLUMN IF EXISTS iddte;`);
        
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.dte RENAME xml TO documento_electronico;`);
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.dte_cancelacion RENAME xml TO documento;`);
        
        await queryRunner.query(
            `ALTER TABLE IF EXISTS facturacion.dte DROP CONSTRAINT IF EXISTS dte_pkey;
            ALTER TABLE IF EXISTS facturacion.dte ADD CONSTRAINT factura_electronica_pkey PRIMARY KEY (idventa);`
        );

        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.dte DROP COLUMN IF EXISTS id;`);
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.dte RENAME TO factura_electronica;`);
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.dte_cancelacion RENAME iddte TO idventa;`);
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.dte_cancelacion RENAME TO cancelacion_factura;`)
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.lote_detalle RENAME iddte TO idventa;`);
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.lote_detalle RENAME TO detalle_lote;`);
        await this.createForeignKeysDown(queryRunner);
        await this.createViewsDown(queryRunner);
    }

    private async dropForeignKeysUp(queryRunner: QueryRunner){
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.cancelacion_factura DROP CONSTRAINT IF EXISTS fk_cancelacion_factura_electronica;`);
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.detalle_lote DROP CONSTRAINT IF EXISTS fk_lote_factura_factura_electronica;`);
    }

    private async dropForeignKeysDown(queryRunner: QueryRunner){
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.dte_cancelacion DROP CONSTRAINT IF EXISTS fk_dte_cancelacion_dte;`);
        await queryRunner.query(`ALTER TABLE IF EXISTS facturacion.lote_detalle DROP CONSTRAINT IF EXISTS fk_lote_detalle_dte;`)
        await queryRunner.query(`ALTER TABLE IF EXISTS public.venta DROP CONSTRAINT IF EXISTS fk_venta_dte;`);
    }

    private async createForeignKeysUp(queryRunner: QueryRunner){
        await queryRunner.query(
            `ALTER TABLE IF EXISTS facturacion.dte_cancelacion
            ADD CONSTRAINT fk_dte_cancelacion_dte FOREIGN KEY (iddte)
            REFERENCES facturacion.dte (id) MATCH SIMPLE
            ON UPDATE NO ACTION
            ON DELETE NO ACTION
            NOT VALID;`
        );
        await queryRunner.query(
            `ALTER TABLE IF EXISTS facturacion.lote_detalle
            ADD CONSTRAINT fk_lote_detalle_dte FOREIGN KEY (iddte)
            REFERENCES facturacion.dte (id) MATCH SIMPLE
            ON UPDATE NO ACTION
            ON DELETE NO ACTION
            NOT VALID;`
        );
    }

    private async createForeignKeysDown(queryRunner: QueryRunner){
        await queryRunner.query(
            `ALTER TABLE IF EXISTS facturacion.detalle_lote
            ADD CONSTRAINT fk_lote_factura_factura_electronica FOREIGN KEY (idventa)
            REFERENCES facturacion.factura_electronica (idventa) MATCH SIMPLE
            ON UPDATE NO ACTION
            ON DELETE NO ACTION
            NOT VALID;`
        );
        await queryRunner.query(
            `ALTER TABLE IF EXISTS facturacion.cancelacion_factura
            ADD CONSTRAINT fk_cancelacion_factura_electronica FOREIGN KEY (idventa)
            REFERENCES facturacion.factura_electronica (idventa) MATCH SIMPLE
            ON UPDATE NO ACTION
            ON DELETE NO ACTION
            NOT VALID;`
        );
        await queryRunner.query(
            `ALTER TABLE IF EXISTS facturacion.factura_electronica
            ADD CONSTRAINT fk_factura_electronica_venta FOREIGN KEY (idventa)
            REFERENCES public.venta (id) MATCH SIMPLE
            ON UPDATE NO ACTION
            ON DELETE NO ACTION
            NOT VALID;`
        );
    }

    private async dropViews(queryRunner: QueryRunner){
        await queryRunner.query(`DROP VIEW IF EXISTS facturacion.vw_facturas_electronicas;`);
        await queryRunner.query(`DROP VIEW IF EXISTS public.vw_ventas;`);
        await queryRunner.query(`DROP VIEW IF EXISTS facturacion.vw_detalles_lotes;`);
    }

    private async createViewsUp(queryRunner: QueryRunner){
        await queryRunner.query(
            `CREATE OR REPLACE VIEW facturacion.vw_facturas_electronicas AS
            SELECT
                dte.id,
                venta.id AS idventa,
                dte.firmado,
                dte.version,
                dte.idestado_documento_sifen AS idestadodocumento,
                estado_documento_sifen.descripcion AS estadodocumento,
                dte.fecha_cambio_estado AS fechacambioestado,
                dte.observacion AS observaciondocumento,
                dte.idestado_envio_email AS idestadoemail,
                estado_envio_email.descripcion AS estadoemail,
                dte.fecha_cambio_estado_envio_email AS fechacambioestadoemail,
                dte.intento_envio_email AS intentoemail,
                dte.observacion_envio_email AS observacionemail
            FROM facturacion.dte
                JOIN facturacion.estado_documento_sifen ON dte.idestado_documento_sifen = estado_documento_sifen.id
                JOIN facturacion.estado_envio_email ON dte.idestado_envio_email = estado_envio_email.id
                JOIN public.venta ON venta.iddte = dte.id;`
        );
        await queryRunner.query(
            `CREATE OR REPLACE VIEW public.vw_ventas AS
            SELECT
                venta.id,
                venta.fecha_factura AS fechafactura,
                venta.fecha_hora_factura AS fechahorafactura,
                venta.total_gravado_iva10 AS totalgravadoiva10,
                venta.total_gravado_iva5 AS totalgravadoiva5,
                venta.total_exento_iva AS totalexentoiva,
                venta.total_iva10 AS totaliva10,
                venta.total_iva5 AS totaliva5,
                venta.total,
                venta.pagado,
                venta.anulado,
                venta.idcliente,
                cliente.razon_social AS cliente,
                cliente.ci,
                cliente.dv_ruc AS dvruc,
                venta.nro_factura AS nrofactura,
                venta.idtalonario,
                talonario.nro_timbrado AS timbrado,
                timbrado.fecha_vencimiento AS vencimientotimbrado,
                timbrado.fecha_inicio_vigencia AS iniciovigenciatimbrado,
                    CASE
                        WHEN venta.idtalonario IS NOT NULL THEN concat(to_char(talonario.cod_establecimiento::double precision, 'fm000'::text), '-', to_char(talonario.cod_punto_emision::double precision, 'fm000'::text))
                        ELSE NULL::text
                    END AS prefijofactura,
                timbrado.electronico AS facturaelectronica,
                cobro.comision_para AS idcobradorcomision,
                btrim(concat(cobrador.nombres, ' ', cobrador.apellidos)) AS cobrador,
                cobro.fecha AS fechacobro,
                venta.idusuario_registro_factura AS idusuarioregistrofactura,
                btrim(concat(usuariofactura.nombres, ' ', usuariofactura.apellidos)) AS usuarioregistrofactura,
                cobro.cobrado_por AS idusuarioregistrocobro,
                btrim(concat(usuariocobro.nombres, ' ', usuariocobro.apellidos)) AS usuarioregistrocobro,
                venta.iddte,
                dte.idestado_documento_sifen AS idestadofacturaelectronica,
                venta.eliminado
            FROM venta
                LEFT JOIN cliente ON cliente.id = venta.idcliente
                LEFT JOIN facturacion.talonario ON talonario.id = venta.idtalonario
                LEFT JOIN facturacion.timbrado ON timbrado.nro_timbrado = talonario.nro_timbrado
                LEFT JOIN usuario usuariofactura ON venta.idusuario_registro_factura = usuariofactura.id
                LEFT JOIN cobro ON cobro.idventa = venta.id AND cobro.anulado = false AND cobro.eliminado = false
                LEFT JOIN usuario cobrador ON cobrador.id = cobro.comision_para
                LEFT JOIN usuario usuariocobro ON cobro.cobrado_por = usuariocobro.id
                LEFT JOIN facturacion.dte ON dte.id = venta.iddte;`
        );
        await queryRunner.query(
            `CREATE OR REPLACE VIEW facturacion.vw_detalles_lotes AS
            SELECT
                lote_detalle.iddte,
                lote_detalle.idlote,
                lote_detalle.codigo_estado AS codigoestado,
                lote_detalle.descripcion,
                talonario.nro_timbrado AS nrotimbrado,
                concat(to_char(talonario.cod_establecimiento::double precision, 'fm000'::text), '-', to_char(talonario.cod_punto_emision::double precision, 'fm000'::text)) AS prefijofactura,
                venta.id AS idventa,
                venta.nro_factura AS nrofactura,
                venta.fecha_factura AS fechafactura,
                venta.fecha_hora_factura AS fechahorafactura
            FROM facturacion.lote_detalle
                JOIN venta ON venta.iddte = lote_detalle.iddte
                JOIN facturacion.talonario ON talonario.id = venta.idtalonario;`
        );
    }

    private async createViewsDown(queryRunner: QueryRunner){
        await queryRunner.query(
            `CREATE OR REPLACE VIEW facturacion.vw_facturas_electronicas AS
            SELECT
                factura_electronica.idventa,
                factura_electronica.firmado,
                factura_electronica.version,
                factura_electronica.idestado_documento_sifen AS idestadodocumento,
                estado_documento_sifen.descripcion AS estadodocumento,
                factura_electronica.fecha_cambio_estado AS fechacambioestado,
                factura_electronica.observacion AS observaciondocumento,
                factura_electronica.idestado_envio_email AS idestadoemail,
                estado_envio_email.descripcion AS estadoemail,
                factura_electronica.fecha_cambio_estado_envio_email AS fechacambioestadoemail,
                factura_electronica.intento_envio_email AS intentoemail,
                factura_electronica.observacion_envio_email AS observacionemail
            FROM facturacion.factura_electronica
                JOIN facturacion.estado_documento_sifen ON factura_electronica.idestado_documento_sifen = estado_documento_sifen.id
                JOIN facturacion.estado_envio_email ON factura_electronica.idestado_envio_email = estado_envio_email.id;`
        );
        await queryRunner.query(
            `CREATE OR REPLACE VIEW public.vw_ventas AS
            SELECT
                venta.id,
                venta.fecha_factura AS fechafactura,
                venta.fecha_hora_factura AS fechahorafactura,
                venta.total_gravado_iva10 AS totalgravadoiva10,
                venta.total_gravado_iva5 AS totalgravadoiva5,
                venta.total_exento_iva AS totalexentoiva,
                venta.total_iva10 AS totaliva10,
                venta.total_iva5 AS totaliva5,
                venta.total,
                venta.pagado,
                venta.anulado,
                venta.idcliente,
                cliente.razon_social AS cliente,
                cliente.ci,
                cliente.dv_ruc AS dvruc,
                venta.nro_factura AS nrofactura,
                venta.idtalonario,
                talonario.nro_timbrado AS timbrado,
                timbrado.fecha_vencimiento AS vencimientotimbrado,
                timbrado.fecha_inicio_vigencia AS iniciovigenciatimbrado,
                    CASE
                        WHEN venta.idtalonario IS NOT NULL THEN concat(to_char(talonario.cod_establecimiento::double precision, 'fm000'::text), '-', to_char(talonario.cod_punto_emision::double precision, 'fm000'::text))
                        ELSE NULL::text
                    END AS prefijofactura,
                timbrado.electronico AS facturaelectronica,
                cobro.comision_para AS idcobradorcomision,
                btrim(concat(cobrador.nombres, ' ', cobrador.apellidos)) AS cobrador,
                cobro.fecha AS fechacobro,
                venta.idusuario_registro_factura AS idusuarioregistrofactura,
                btrim(concat(usuariofactura.nombres, ' ', usuariofactura.apellidos)) AS usuarioregistrofactura,
                cobro.cobrado_por AS idusuarioregistrocobro,
                btrim(concat(usuariocobro.nombres, ' ', usuariocobro.apellidos)) AS usuarioregistrocobro,
                factura_electronica.idestado_documento_sifen AS idestadofacturaelectronica,
                venta.eliminado
            FROM venta
                LEFT JOIN cliente ON cliente.id = venta.idcliente
                LEFT JOIN facturacion.talonario ON talonario.id = venta.idtalonario
                LEFT JOIN facturacion.timbrado ON timbrado.nro_timbrado = talonario.nro_timbrado
                LEFT JOIN usuario usuariofactura ON venta.idusuario_registro_factura = usuariofactura.id
                LEFT JOIN cobro ON cobro.idventa = venta.id AND cobro.anulado = false AND cobro.eliminado = false
                LEFT JOIN usuario cobrador ON cobrador.id = cobro.comision_para
                LEFT JOIN usuario usuariocobro ON cobro.cobrado_por = usuariocobro.id
                LEFT JOIN facturacion.factura_electronica ON factura_electronica.idventa = venta.id;`
        );
        await queryRunner.query(
            `CREATE OR REPLACE VIEW facturacion.vw_detalles_lotes AS
            SELECT
                detalle_lote.idventa,
                detalle_lote.idlote,
                detalle_lote.codigo_estado AS codigoestado,
                detalle_lote.descripcion,
                talonario.nro_timbrado AS nrotimbrado,
                concat(to_char(talonario.cod_establecimiento::double precision, 'fm000'::text), '-', to_char(talonario.cod_punto_emision::double precision, 'fm000'::text)) AS prefijofactura,
                venta.nro_factura AS nrofactura,
                venta.fecha_factura AS fechafactura,
                venta.fecha_hora_factura AS fechahorafactura
            FROM facturacion.detalle_lote
                JOIN venta ON venta.id = detalle_lote.idventa
                JOIN facturacion.talonario ON talonario.id = venta.idtalonario;`
        );
    }

}
