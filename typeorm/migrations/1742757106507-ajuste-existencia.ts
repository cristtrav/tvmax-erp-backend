import { MigrationInterface, QueryRunner } from "typeorm";

export class AjusteExistencia1742757106507 implements MigrationInterface {

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(
            `CREATE TABLE depositos.ajuste_existencia
            (
                id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 100 MINVALUE 100 ),
                fecha_hora timestamp with time zone NOT NULL DEFAULT NOW(),
                idmaterial integer NOT NULL,
                cantidad_anterior numeric(9, 2) NOT NULL DEFAULT 0,
                cantidad_nueva numeric(9, 2) NOT NULL DEFAULT 0,
                idusuario integer NOT NULL,
                eliminado boolean NOT NULL DEFAULT false,
                PRIMARY KEY (id),
                CONSTRAINT fk_ajuste_material_material FOREIGN KEY (idmaterial)
                    REFERENCES depositos.material (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
                    NOT VALID,
                CONSTRAINT fk_ajuste_material_usuario FOREIGN KEY (idusuario)
                    REFERENCES public.usuario (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
                    NOT VALID
            );`
        );
        await queryRunner.query(
            `CREATE TABLE depositos.ajuste_material_identificable
            (
                idajuste_existencia integer NOT NULL,
                idmaterial integer NOT NULL,
                serial character varying(70) NOT NULL,
                disponibilidad_anterior boolean NOT NULL DEFAULT false,
                disponibilidad_nueva boolean NOT NULL DEFAULT false,
                baja_anterior boolean NOT NULL DEFAULT false,
                baja_nueva boolean NOT NULL DEFAULT false,
                PRIMARY KEY (idajuste_existencia, idmaterial, serial),
                CONSTRAINT fk_ajuste_material_identificable_ajuste_existencia FOREIGN KEY (idajuste_existencia)
                    REFERENCES depositos.ajuste_existencia (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
                    NOT VALID,
                CONSTRAINT fk_ajuste_material_identificable FOREIGN KEY (idmaterial, serial)
                    REFERENCES depositos.material_identificable (idmaterial, serial) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
                    NOT VALID
            );`
        );
        await queryRunner.query(
            `INSERT INTO public.tabla_auditoria(id, descripcion) VALUES
            (43, 'Ajustes de existencias de materiales'),
            (44, 'Detalles de ajustes de existencias de materiales')`
        );
        await queryRunner.query(
            `INSERT INTO public.modulo(id, descripcion, eliminado) 
            VALUES(45, 'Ajustes de existencias de materiales', false);`
        );
        await queryRunner.query(
            `INSERT INTO public.funcionalidad(id, idmodulo, nombre, eliminado) VALUES
            (1400, 45, 'Acceso al m√≥dulo', false),
            (1401, 45, 'Acceso al formulario', false),
            (1402, 45, 'Consultar', false),
            (1403, 45, 'Registrar', false),
            (1404, 45, 'Editar', false),
            (1405, 45, 'Eliminar', false);`
        );
        await queryRunner.query(
            `CREATE OR REPLACE VIEW depositos.vw_ajustes_existencias AS
              SELECT ajuste_existencia.id,
                ajuste_existencia.fecha_hora AS fechahora,
                ajuste_existencia.idmaterial,
                material.descripcion AS material,
                material.unidad_medida AS unidadmedida,
                ajuste_existencia.cantidad_anterior AS cantidadanterior,
                ajuste_existencia.cantidad_nueva AS cantidadnueva,
                ajuste_existencia.idusuario,
                TRIM(BOTH FROM concat(usuario.nombres, ' ', usuario.apellidos)) AS usuario,
                ajuste_existencia.eliminado,
                (( SELECT max(ajuste_existencia_1.id) AS max
                FROM depositos.ajuste_existencia ajuste_existencia_1
                WHERE ajuste_existencia_1.eliminado = false AND ajuste_existencia_1.idmaterial = ajuste_existencia.idmaterial)
                ) = ajuste_existencia.id AS ultimoid
            FROM depositos.ajuste_existencia
                JOIN depositos.material ON material.id = ajuste_existencia.idmaterial
                JOIN usuario ON ajuste_existencia.idusuario = usuario.id;`
        );
        await queryRunner.query(
            `CREATE OR REPLACE VIEW depositos.vw_ajustes_materiales_identificables AS
            SELECT
                ajuste_material_identificable.idajuste_existencia AS idajusteexistencia,
                ajuste_material_identificable.idmaterial,
                ajuste_material_identificable.serial,
                ajuste_material_identificable.disponibilidad_anterior AS disponibilidadanterior,
                ajuste_material_identificable.disponibilidad_nueva AS disponibilidadnueva,
                ajuste_material_identificable.baja_anterior AS bajaanterior,
                ajuste_material_identificable.baja_nueva AS bajanueva
            FROM depositos.ajuste_material_identificable`
        );
        await queryRunner.query(
            `ALTER TABLE IF EXISTS depositos.material_identificable 
            ADD COLUMN eliminado boolean NOT NULL DEFAULT false;`
        );
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`DROP VIEW IF EXISTS depositos.vw_ajustes_existencias;`);
        await queryRunner.query(`DROP VIEW IF EXISTS depositos.vw_ajustes_materiales_identificables;`);
        await queryRunner.query(`DELETE FROM public.evento_auditoria WHERE idtabla IN (43,44);`);
        await queryRunner.query(`DELETE FROM public.tabla_auditoria WHERE id IN (43, 44);`);
        
        await queryRunner.query(`DELETE FROM public.permiso WHERE idfuncionalidad IN (1400, 1401, 1402, 1403, 1404, 1405);`);
        await queryRunner.query(`DELETE FROM public.funcionalidad WHERE idmodulo = 45;`);
        await queryRunner.query(`DELETE FROM public.modulo WHERE id = 45;`);

        await queryRunner.query(`DROP TABLE IF EXISTS depositos.ajuste_material_identificable;`);
        await queryRunner.query(`DROP TABLE IF EXISTS depositos.ajuste_existencia;`);
        
        await queryRunner.query(`ALTER TABLE IF EXISTS depositos.material_identificable DROP COLUMN IF EXISTS eliminado;`);
    }

}
