import { MigrationInterface, QueryRunner } from "typeorm";

export class UsuarioDepositoRefactoring1712164055978 implements MigrationInterface {

    public async up(queryRunner: QueryRunner): Promise<void> {
        await this.dropViews(queryRunner);
        await queryRunner.query(`DROP VIEW IF EXISTS public.vw_rol`);
        await queryRunner.query(`DROP VIEW IF EXISTS public.vw_movimientos_materiales`);
        await queryRunner.query(`DROP VIEW IF EXISTS public.vw_usuarios_depositos`);

        await queryRunner.query(`ALTER TABLE public.rol ALTER COLUMN descripcion TYPE character varying(50) COLLATE pg_catalog."default"`);
        await queryRunner.query(`INSERT INTO public.rol(id, descripcion, solo_lectura, eliminado) VALUES (7, 'Retiro de Materiales de Depósito', true, false)`);
        await queryRunner.query(`INSERT INTO public.rol(id, descripcion, solo_lectura, eliminado) VALUES (8, 'Proveedor de Materiales de Depósito', true, false)`);
        await queryRunner.query(
            `INSERT INTO public.usuario (id, nombres)
            SELECT id + 52, razon_social FROM depositos.usuario_deposito`
        );
        await queryRunner.query(
            `INSERT INTO public.rol_usuario(idusuario, idrol)
            SELECT
                id + 52 AS idusuario,
                CASE
                    WHEN rol = 'PR' THEN 8
                    WHEN rol = 'RE' THEN 7
                    ELSE 2
                END AS idrol
            FROM
                depositos.usuario_deposito`
        );
        await queryRunner.query(`ALTER TABLE IF EXISTS depositos.movimiento_material DROP CONSTRAINT IF EXISTS fk_movimiento_usuario_deposito`);
        await queryRunner.query(`UPDATE depositos.movimiento_material SET idusuario_entrega = idusuario_entrega + 52`);
        await queryRunner.query(
            `ALTER TABLE IF EXISTS depositos.movimiento_material
            ADD CONSTRAINT fk_movimiento_usuario_deposito FOREIGN KEY (idusuario_entrega)
            REFERENCES public.usuario (id) MATCH SIMPLE
            ON UPDATE NO ACTION
            ON DELETE NO ACTION
            NOT VALID`
        );
        await queryRunner.query(`DROP TABLE IF EXISTS depositos.usuario_deposito`);
        await queryRunner.query(`DROP TYPE IF EXISTS depositos.rol_usuario_deposito_type`);
        await queryRunner.query(
            `CREATE VIEW depositos.vw_movimientos_materiales
            AS
            SELECT movimiento_material.id,
                movimiento_material.fecha,
                movimiento_referencia.fecha AS fecharetiro,
                movimiento_material.tipo_movimiento AS tipomovimiento,
                movimiento_material.idusuario_responsable AS idusuarioresponsable,
                TRIM(BOTH FROM concat(usuarioresponsable.nombres, ' ', usuarioresponsable.apellidos)) AS usuarioresponsable,
                movimiento_material.idusuario_entrega AS idusuarioentrega,
                TRIM(BOTH FROM concat(usuarioentrega.nombres, ' ', usuarioentrega.apellidos)) AS usuarioentrega,
                movimiento_material.idmovimiento_referencia AS idmovimientoreferencia,
                movimiento_material.observacion,
                movimiento_material.devuelto,
                movimiento_material.eliminado
            FROM depositos.movimiento_material
            LEFT JOIN public.usuario usuarioentrega ON usuarioentrega.id = movimiento_material.idusuario_entrega
            LEFT JOIN depositos.movimiento_material movimiento_referencia ON movimiento_material.idmovimiento_referencia = movimiento_referencia.id
            JOIN usuario usuarioresponsable ON movimiento_material.idusuario_responsable = usuarioresponsable.id`
        );
        await queryRunner.query(
            `CREATE VIEW public.vw_rol AS
            SELECT
                id,
                descripcion,
                solo_lectura AS sololectura,
                eliminado
            FROM rol;`
        );
        await queryRunner.query(`UPDATE public.funcionalidad SET eliminado = true WHERE id >= 721 AND id <= 725`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await this.dropViews(queryRunner);
        await queryRunner.query(`CREATE TYPE depositos.rol_usuario_deposito_type AS ENUM('PR', 'RE')`);
        await queryRunner.query(
            `COMMENT ON TYPE depositos.rol_usuario_deposito_type
            IS 'PR = Proveedor (Se usa normalmente en el tipo de movimiento ENTRADA)
            RE = Retiro (Se usa normalmente en el tipo de movimiento SALIDA)'`
        );
        await queryRunner.query(
            `CREATE TABLE depositos.usuario_deposito
            (
                id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                razon_social character varying(80) NOT NULL,
                rol depositos.rol_usuario_deposito_type NOT NULL,
                eliminado boolean NOT NULL DEFAULT false,
                PRIMARY KEY (id)
            )`
        );
        await queryRunner.query(
            `INSERT INTO depositos.usuario_deposito(id, razon_social, eliminado, rol)
            SELECT DISTINCT ON (usuario.id)
                usuario.id - 52 AS id,
                CONCAT(usuario.nombres, ' ', usuario.apellidos) AS razon_social,
                usuario.eliminado,
                CASE
                    WHEN rol_usuario.idrol = 7 THEN 'RE'::depositos.rol_usuario_deposito_type
                    WHEN rol_usuario.idrol = 8 THEN 'PR'::depositos.rol_usuario_deposito_type
                    ELSE 'RE'
                END AS rol
            FROM public.usuario
            LEFT JOIN public.rol_usuario ON rol_usuario.idusuario = usuario.id
                WHERE id >= 53 AND id <= 72
            ORDER BY usuario.id ASC`
        );
        await queryRunner.query(`ALTER TABLE IF EXISTS depositos.movimiento_material DROP CONSTRAINT IF EXISTS fk_movimiento_usuario_deposito`);
        await queryRunner.query(`UPDATE depositos.movimiento_material SET idusuario_entrega = idusuario_entrega - 52`);
        await queryRunner.query(
            `ALTER TABLE IF EXISTS depositos.movimiento_material
            ADD CONSTRAINT fk_movimiento_usuario_deposito FOREIGN KEY (idusuario_entrega)
            REFERENCES depositos.usuario_deposito (id) MATCH SIMPLE
            ON UPDATE NO ACTION
            ON DELETE NO ACTION
            NOT VALID`
        );
        await queryRunner.query(`DELETE FROM public.rol_usuario WHERE idusuario >= 53 AND idusuario <= 73`);
        await queryRunner.query(`DELETE FROM public.rol WHERE id = 7`);
        await queryRunner.query(`DELETE FROM public.rol WHERE id = 8`);
        await queryRunner.query(`DELETE FROM public.usuario WHERE id >= 53 AND id <= 72`);
        await queryRunner.query(`ALTER TABLE public.rol ALTER COLUMN descripcion TYPE character varying(30) COLLATE pg_catalog."default";`);
        await queryRunner.query(
            `CREATE VIEW depositos.vw_usuarios_depositos
            AS
            SELECT id,
                razon_social AS razonsocial,
                rol,
                eliminado
            FROM depositos.usuario_deposito;`
        );
        await queryRunner.query(
            `CREATE VIEW depositos.vw_movimientos_materiales
            AS
            SELECT movimiento_material.id,
                movimiento_material.fecha,
                movimiento_referencia.fecha AS fecharetiro,
                movimiento_material.tipo_movimiento AS tipomovimiento,
                movimiento_material.idusuario_responsable AS idusuarioresponsable,
                TRIM(BOTH FROM concat(usuarioresponsable.nombres, ' ', usuarioresponsable.apellidos)) AS usuarioresponsable,
                movimiento_material.idusuario_entrega AS idusuarioentrega,
                usuario_deposito.razon_social AS usuarioentrega,
                movimiento_material.idmovimiento_referencia AS idmovimientoreferencia,
                movimiento_material.observacion,
                movimiento_material.devuelto,
                movimiento_material.eliminado
            FROM depositos.movimiento_material
                LEFT JOIN depositos.usuario_deposito ON usuario_deposito.id = movimiento_material.idusuario_entrega
                LEFT JOIN depositos.movimiento_material movimiento_referencia ON movimiento_material.idmovimiento_referencia = movimiento_referencia.id
                JOIN usuario usuarioresponsable ON movimiento_material.idusuario_responsable = usuarioresponsable.id;`
        );
        await queryRunner.query(
            `CREATE VIEW public.vw_rol AS
            SELECT
                id,
                descripcion,
                solo_lectura AS sololectura,
                eliminado
            FROM rol;`
        );
        await await queryRunner.query(`UPDATE public.funcionalidad SET eliminado = false WHERE id >= 721 AND id <= 725`);
    }

    private async dropViews(queryRunner: QueryRunner){
        await queryRunner.query(`DROP VIEW IF EXISTS public.vw_rol`);
        await queryRunner.query(`DROP VIEW IF EXISTS depositos.vw_movimientos_materiales`);
        await queryRunner.query(`DROP VIEW IF EXISTS depositos.vw_usuarios_depositos`);
    }

}
