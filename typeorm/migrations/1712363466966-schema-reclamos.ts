import { MigrationInterface, QueryRunner } from "typeorm";

export class SchemaReclamos1712363466966 implements MigrationInterface {

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE SCHEMA reclamos`);
        await queryRunner.query(`CREATE TYPE reclamos.estado_reclamo AS ENUM ('PEN','PRO','POS','FIN','OTR')`);
        await queryRunner.query(`COMMENT ON TYPE reclamos.estado_reclamo IS 'PEN=Pendiente,  PRO=En proceso, POS=Postergado, FIN=Finalizado, OTR = Otro'`);
        await queryRunner.query(
            `CREATE TABLE reclamos.detalle_reclamo (
                id integer NOT NULL,
                idreclamo integer NOT NULL,
                idmotivo integer NOT NULL,
                observacion character varying(150),
                eliminado boolean DEFAULT false NOT NULL
            )`
        );
        await queryRunner.query(
            `ALTER TABLE reclamos.detalle_reclamo ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
                SEQUENCE NAME reclamos.detalle_reclamo_id_seq
                START WITH 100
                INCREMENT BY 1
                NO MINVALUE
                NO MAXVALUE
                CACHE 1
            )`
        );
        await queryRunner.query(
            `CREATE TABLE reclamos.material_utilizado (
                id integer NOT NULL,
                idreclamo integer NOT NULL,
                idmaterial integer NOT NULL,
                cantidad numeric(9,2) DEFAULT 0 NOT NULL,
                eliminado boolean DEFAULT false NOT NULL
            )`
        );
        await queryRunner.query(
            `ALTER TABLE reclamos.material_utilizado ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
                SEQUENCE NAME reclamos.material_utilizado_id_seq
                START WITH 10
                INCREMENT BY 1
                NO MINVALUE
                NO MAXVALUE
                CACHE 1
            )`
        );
        await queryRunner.query(
            `CREATE TABLE reclamos.motivo (
                id integer NOT NULL,
                descripcion character varying(80) NOT NULL,
                eliminado boolean DEFAULT false NOT NULL
            )`
        );
        await queryRunner.query(
            `ALTER TABLE reclamos.motivo ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
                SEQUENCE NAME reclamos.motivo_id_seq
                START WITH 10
                INCREMENT BY 1
                NO MINVALUE
                NO MAXVALUE
                CACHE 1
            )`
        );
        await queryRunner.query(
            `CREATE TABLE reclamos.reclamo (
                id integer NOT NULL,
                fecha date NOT NULL,
                fecha_hora_cambio_estado timestamp without time zone NOT NULL,
                observacion_estado character varying(30),
                idusuario_registro integer NOT NULL,
                idusuario_responsable integer,
                idsuscripcion integer NOT NULL,
                eliminado boolean DEFAULT false NOT NULL,
                estado reclamos.estado_reclamo NOT NULL
            )`
        );
        await queryRunner.query(
            `ALTER TABLE reclamos.reclamo ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
                SEQUENCE NAME reclamos.reclamo_id_seq
                START WITH 10
                INCREMENT BY 1
                NO MINVALUE
                NO MAXVALUE
                CACHE 1
            )`
        );
        await queryRunner.query(
            `CREATE VIEW reclamos.vw_detalles_reclamos AS
            SELECT
                detalle_reclamo.id,
                detalle_reclamo.idreclamo,
                detalle_reclamo.idmotivo,
                motivo.descripcion AS motivo,
                detalle_reclamo.observacion,
                detalle_reclamo.eliminado
            FROM (reclamos.detalle_reclamo
            JOIN reclamos.motivo ON ((detalle_reclamo.idmotivo = motivo.id)))`
        );
        await queryRunner.query(
            `CREATE VIEW reclamos.vw_reclamos AS
                SELECT
                    reclamo.id,
                    reclamo.fecha,
                    reclamo.fecha_hora_cambio_estado AS fechahoracambioestado,
                    reclamo.observacion_estado AS observacionestado,
                    reclamo.idusuario_registro AS idusuarioregistro,
                    TRIM(BOTH FROM concat(uregistro.nombres, ' ', uregistro.apellidos)) AS usuarioregistro,
                    reclamo.idusuario_responsable AS idusuarioresponsable,
                    TRIM(BOTH FROM concat(uresponsable.nombres, ' ', uresponsable.apellidos)) AS usuarioresponsable,
                    reclamo.idsuscripcion,
                    servicio.id AS idservicio,
                    servicio.descripcion AS servicio,
                    suscripcion.monto,
                    cliente.id AS idcliente,
                    cliente.razon_social AS cliente,
                    reclamo.estado,
                    reclamo.eliminado
                FROM (((((reclamos.reclamo
                    JOIN public.suscripcion ON ((reclamo.idsuscripcion = suscripcion.id)))
                    JOIN public.cliente ON ((suscripcion.idcliente = cliente.id)))
                    JOIN public.servicio ON ((suscripcion.idservicio = servicio.id)))
                    JOIN public.usuario uregistro ON ((uregistro.id = reclamo.idusuario_registro)))
                    LEFT JOIN public.usuario uresponsable ON ((uresponsable.id = reclamo.idusuario_responsable)))`
        );
        await queryRunner.query(`ALTER TABLE ONLY reclamos.detalle_reclamo ADD CONSTRAINT pk_detalle_reclamo PRIMARY KEY (id)`);
        await queryRunner.query(`ALTER TABLE ONLY reclamos.material_utilizado ADD CONSTRAINT pk_material_utilizado PRIMARY KEY (id)`);
        await queryRunner.query(`ALTER TABLE ONLY reclamos.motivo ADD CONSTRAINT pk_motivo PRIMARY KEY (id)`);
        await queryRunner.query(`ALTER TABLE ONLY reclamos.reclamo ADD CONSTRAINT pk_reclamo PRIMARY KEY (id)`);
        await queryRunner.query(`ALTER TABLE ONLY reclamos.detalle_reclamo ADD CONSTRAINT detalle_reclamo_idmotivo_fkey FOREIGN KEY (idmotivo) REFERENCES reclamos.motivo(id) NOT VALID`);
        await queryRunner.query(`ALTER TABLE ONLY reclamos.detalle_reclamo ADD CONSTRAINT detalle_reclamo_idreclamo_fkey FOREIGN KEY (idreclamo) REFERENCES reclamos.reclamo(id) NOT VALID`);
        await queryRunner.query(`ALTER TABLE ONLY reclamos.material_utilizado ADD CONSTRAINT material_utilizado_idreclamo_fkey FOREIGN KEY (idreclamo) REFERENCES reclamos.reclamo(id) NOT VALID`);
        await queryRunner.query(`INSERT INTO public.modulo(id, descripcion, eliminado) VALUES(31, 'Reclamos', false)`);
        await queryRunner.query(`INSERT INTO public.funcionalidad(id, nombre, idmodulo, eliminado) VALUES (800, 'Acceso al MÃ³dulo', 31, false)`);
        await queryRunner.query(`INSERT INTO public.rol(id, descripcion, eliminado, solo_lectura) VALUES (9, 'Proceso de Reclamos', false, true)`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`DELETE FROM public.rol_usuario WHERE rol_usuario.idrol = 9`);
        await queryRunner.query(`DELETE FROM public.rol WHERE id = 9`);
        await queryRunner.query(`DELETE FROM public.permiso WHERE permiso.idfuncionalidad = 800`);
        await queryRunner.query(`DELETE FROM public.funcionalidad WHERE id = 800`);
        await queryRunner.query(`DELETE FROM public.modulo WHERE id = 31`);
        await queryRunner.query(`DROP SCHEMA IF EXISTS reclamos CASCADE`);
    }

}
